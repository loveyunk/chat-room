Socket {
    nsp:
    Namespace {
    name: '/',
    server:
    Server {
    nsps: [Object],
    parentNsps: Map {},
_path: '/socket.io',
_serveClient: true,
parser: [Object],
encoder: Encoder {},
_adapter: [Function: Adapter],
_origins: '*:*',
sockets: [Circular],
eio: [Server],
httpServer: [Server],
engine: [Server] },
sockets:
{ DXjd7By0cFGncZVKAAAA: [Socket],
'fwNe-Sv81J6Ra7EdAAAC': [Socket],
r5qh0hNku7R2t1mzAAAD: [Circular] },
connected:
{ DXjd7By0cFGncZVKAAAA: [Socket],
'fwNe-Sv81J6Ra7EdAAAC': [Socket],
r5qh0hNku7R2t1mzAAAD: [Circular] },
fns: [],
ids: 0,
rooms: [],
flags: {},
adapter:
Adapter {
nsp: [Circular],
rooms: [Object],
sids: [Object],
encoder: Encoder {} },
_events: { connection: [Function] },
_eventsCount: 1 },
server:
Server {
nsps: { '/': [Namespace] },
parentNsps: Map {},
_path: '/socket.io',
_serveClient: true,
parser:
{ protocol: 4,
types: [Array],
CONNECT: 0,
DISCONNECT: 1,
EVENT: 2,
ACK: 3,
ERROR: 4,
BINARY_EVENT: 5,
BINARY_ACK: 6,
Encoder: [Function: Encoder],
Decoder: [Function: Decoder] },
encoder: Encoder {},
_adapter: [Function: Adapter],
_origins: '*:*',
sockets:
Namespace {
name: '/',
server: [Circular],
sockets: [Object],
connected: [Object],
fns: [],
ids: 0,
rooms: [],
flags: {},
adapter: [Adapter],
_events: [Object],
_eventsCount: 1 },
eio:
Server {
clients: [Object],
clientsCount: 3,
wsEngine: 'ws',
pingTimeout: 5000,
pingInterval: 25000,
upgradeTimeout: 10000,
maxHttpBufferSize: 100000000,
transports: [Array],
allowUpgrades: true,
allowRequest: [Function: bound ],
cookie: 'io',
cookiePath: '/',
cookieHttpOnly: true,
perMessageDeflate: [Object],
httpCompression: [Object],
initialPacket: [Array],
ws: [WebSocketServer],
_events: [Object],
_eventsCount: 1 },
httpServer:
Server {
_events: [Object],
_eventsCount: 5,
_maxListeners: undefined,
_connections: 4,
_handle: [TCP],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
httpAllowHalfOpen: false,
timeout: 120000,
keepAliveTimeout: 5000,
_pendingResponseData: 0,
maxHeadersCount: null,
_connectionKey: '6::::3001',
[Symbol(IncomingMessage)]: [Function],
[Symbol(ServerResponse)]: [Function],
[Symbol(asyncId)]: 6 },
engine:
Server {
clients: [Object],
clientsCount: 3,
wsEngine: 'ws',
pingTimeout: 5000,
pingInterval: 25000,
upgradeTimeout: 10000,
maxHttpBufferSize: 100000000,
transports: [Array],
allowUpgrades: true,
allowRequest: [Function: bound ],
cookie: 'io',
cookiePath: '/',
cookieHttpOnly: true,
perMessageDeflate: [Object],
httpCompression: [Object],
initialPacket: [Array],
ws: [WebSocketServer],
_events: [Object],
_eventsCount: 1 } },
adapter:
Adapter {
nsp:
Namespace {
name: '/',
server: [Server],
sockets: [Object],
connected: [Object],
fns: [],
ids: 0,
rooms: [],
flags: {},
adapter: [Circular],
_events: [Object],
_eventsCount: 1 },
rooms:
{ DXjd7By0cFGncZVKAAAA: [Room],
'fwNe-Sv81J6Ra7EdAAAC': [Room],
r5qh0hNku7R2t1mzAAAD: [Room] },
sids:
{ DXjd7By0cFGncZVKAAAA: [Object],
'fwNe-Sv81J6Ra7EdAAAC': [Object],
r5qh0hNku7R2t1mzAAAD: [Object] },
encoder: Encoder {} },
id: 'r5qh0hNku7R2t1mzAAAD',
client:
Client {
server:
Server {
nsps: [Object],
parentNsps: Map {},
_path: '/socket.io',
_serveClient: true,
parser: [Object],
encoder: Encoder {},
_adapter: [Function: Adapter],
_origins: '*:*',
sockets: [Namespace],
eio: [Server],
httpServer: [Server],
engine: [Server] },
conn:
Socket {
id: 'r5qh0hNku7R2t1mzAAAD',
server: [Server],
upgrading: false,
upgraded: true,
readyState: 'open',
writeBuffer: [],
packetsFn: [],
sentCallbackFn: [],
cleanupFn: [Array],
request: [IncomingMessage],
remoteAddress: '::1',
checkIntervalTimer: null,
upgradeTimeoutTimer: null,
pingTimeoutTimer: [Timeout],
transport: [WebSocket],
_events: [Object],
_eventsCount: 3 },
encoder: Encoder {},
decoder: Decoder { reconstructor: null, _callbacks: [Object] },
id: 'r5qh0hNku7R2t1mzAAAD',
request:
IncomingMessage {
_readableState: [ReadableState],
readable: false,
_events: {},
_eventsCount: 0,
_maxListeners: undefined,
socket: [Socket],
connection: [Socket],
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: true,
headers: [Object],
rawHeaders: [Array],
trailers: {},
rawTrailers: [],
upgrade: false,
url: '/socket.io/?EIO=3&transport=polling&t=MCabVon',
method: 'GET',
statusCode: null,
statusMessage: null,
client: [Socket],
_consuming: true,
_dumped: true,
_query: [Object],
res: [ServerResponse],
cleanup: [Function: cleanup],
read: [Function] },
onclose: [Function: bound ],
ondata: [Function: bound ],
onerror: [Function: bound ],
ondecoded: [Function: bound ],
sockets: { r5qh0hNku7R2t1mzAAAD: [Circular] },
nsps: { '/': [Circular] },
connectBuffer: [] },
conn:
Socket {
id: 'r5qh0hNku7R2t1mzAAAD',
server:
Server {
clients: [Object],
clientsCount: 3,
wsEngine: 'ws',
pingTimeout: 5000,
pingInterval: 25000,
upgradeTimeout: 10000,
maxHttpBufferSize: 100000000,
transports: [Array],
allowUpgrades: true,
allowRequest: [Function: bound ],
cookie: 'io',
cookiePath: '/',
cookieHttpOnly: true,
perMessageDeflate: [Object],
httpCompression: [Object],
initialPacket: [Array],
ws: [WebSocketServer],
_events: [Object],
_eventsCount: 1 },
upgrading: false,
upgraded: true,
readyState: 'open',
writeBuffer: [],
packetsFn: [],
sentCallbackFn: [],
cleanupFn: [ [Function], [Function] ],
request:
IncomingMessage {
_readableState: [ReadableState],
readable: false,
_events: {},
_eventsCount: 0,
_maxListeners: undefined,
socket: [Socket],
connection: [Socket],
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: true,
headers: [Object],
rawHeaders: [Array],
trailers: {},
rawTrailers: [],
upgrade: false,
url: '/socket.io/?EIO=3&transport=polling&t=MCabVon',
method: 'GET',
statusCode: null,
statusMessage: null,
client: [Socket],
_consuming: true,
_dumped: true,
_query: [Object],
res: [ServerResponse],
cleanup: [Function: cleanup],
read: [Function] },
remoteAddress: '::1',
checkIntervalTimer: null,
upgradeTimeoutTimer: null,
pingTimeoutTimer:
Timeout {
_called: false,
_idleTimeout: 30000,
_idlePrev: [TimersList],
_idleNext: [Timeout],
_idleStart: 9793,
_onTimeout: [Function],
_timerArgs: undefined,
_repeat: null,
_destroyed: false,
[Symbol(asyncId)]: 251,
[Symbol(triggerAsyncId)]: 205 },
transport:
WebSocket {
readyState: 'open',
discarded: false,
socket: [WebSocket],
writable: true,
perMessageDeflate: [Object],
supportsBinary: true,
_events: [Object],
_eventsCount: 4 },
_events:
{ close: [Array],
data: [Function: bound ],
error: [Function: bound ] },
_eventsCount: 3 },
rooms: { r5qh0hNku7R2t1mzAAAD: 'r5qh0hNku7R2t1mzAAAD' },
acks: {},
connected: true,
disconnected: false,
handshake:
{ headers:
{ host: 'localhost:3001',
connection: 'keep-alive',
accept: '*/*',
origin: 'http://localhost:3000',
'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36',
referer: 'http://localhost:3000/',
'accept-encoding': 'gzip, deflate, br',
'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,es;q=0.6,it;q=0.5',
cookie: 'JSESSIONID=6F576C20305C5C5EA2C2CA74C5E63027; io=uuvRfp316Zm4whU8AAAB' },
time: 'Thu May 03 2018 13:59:59 GMT+0800 (CST)',
address: '::1',
xdomain: true,
secure: false,
issued: 1525327199413,
url: '/socket.io/?EIO=3&transport=polling&t=MCabVon',
query: { EIO: '3', transport: 'polling', t: 'MCabVon' } },
fns: [],
flags: {},
_rooms: [],
_events:
{ enter: [Function],
privateList: [Function],
updateMessages: [Function],
sendImg: [Function],
leave: [Function] },
_eventsCount: 5 }
